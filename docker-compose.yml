version: '3.8'

services:

  nginx:
    build: ./nginx
    ports:
      - "443:443"
      - "80:80"

    depends_on:
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build: ./frrontend
    container_name: frontend
    expose:
      - "3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: npm start
    volumes:
      - ./frrontend:/src
    networks:
      - app-network
    restart: unless-stopped

  backend:
    env_file:
      - .env
    build:
      context: .
      dockerfile: ./backend/dockerfile
    volumes:
      - ./certificates:/app/certificates
      - ./nginx/ssl:/app/certs
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - CLIENT_SECRET=${CLIENT_SECRET}
      - TENANT_ID=${TENANT_ID}
      - CLIENT_ID=${CLIENT_ID}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=senha
      - DB_NAME=agendamentos
    depends_on:
      db: 
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:13
    container_name: postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=senha
      - POSTGRES_DB=agendamentos
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.UTF-8
      - LANG=en_US.utf8      # <-- Adicione
      - LC_ALL=en_US.utf8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d agendamentos"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local